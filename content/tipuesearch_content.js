var tipuesearch = {"pages": [{'title': 'About', 'text': '\n \n 此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n \n \n 虎科之光 \n 塞子歌 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Teacher No.1', 'text': '\n I am a good boy please give me a higher point thanks \n', 'tags': '', 'url': 'Teacher No.1.html'}, {'title': '網際網路', 'text': '網際網路 （英語： Internet ）是指 20世紀 末期興起 電腦網路 與電腦網路之間所串連成的龐大 網路 系統。這些網路以一些標準的 網路協定 相連。它是由從地方到全球範圍內幾百萬個私人、 學術界 、企業和政府的網路所構成，透過 電子 ， 無線 和 光纖網路技術 等等一系列廣泛的技術聯繫在一起。網際網路承載範圍廣泛的資訊資源和服務，例如相互關聯的 超文字 檔案，還有 全球資訊網 （ WWW ）的應用， 電子郵件 ， 通話 ，以及 檔案分享 服務。 \n 網際網路的起源可以追溯到1960年代 美國聯邦政府 委託進行的一項研究，目的是建立容錯與電腦網路的通信。網際網路的前身 ARPANET 最初在1980年代作為區域學術和軍事網路連接的骨幹。1980年代， NSFNET 成為新的骨幹而得到資助，以及其他商業化擴展得到了私人資助，導致了全世界網路技術的發展，以及許多網路的合併。到1990年代初，商業網路和企業之間的連接標誌著向現代網際網路的過渡。儘管網際網路在1980年代被學術界廣泛使用 ， 但商業化的服務和技術融入了現代每個人的生活 。 \n', 'tags': '', 'url': '網際網路.html'}, {'title': 'SSH', 'text': 'Secure Shell （安全外殼協定，簡稱 SSH ）是一種加密的 網路傳輸協定 ，可在不安全的網路中為網路服務提供安全的傳輸環境 。SSH通過在網路中建立 安全隧道 來實現SSH客戶端與伺服器之間的連接 。雖然任何網路服務都可以通過SSH實現安全傳輸，SSH最常見的用途是遠端登入系統，人們通常利用SSH來傳輸 命令行介面 和遠端執行命令。SSH使用頻率最高的場合是 類Unix系統 ，但是 Windows 作業系統也能有限度地使用SSH。2015年，微軟宣布將在未來的作業系統中提供原生SSH協定支援 ， Windows \xa0 10 1809版本已提供 OpenSSH 工具 。 \n SSH以 非對稱加密 實現 身分驗證 。身分驗證有多種途徑，例如其中一種方法是使用自動生成的公鑰-私鑰對來簡單地加密網路連接，隨後使用密碼認證進行登入；另一種方法是人工生成一對公鑰和私鑰，通過生成的金鑰進行認證，這樣就可以在不輸入密碼的情況下登入。任何人都可以自行生成金鑰。公鑰需要放在待存取的電腦之中，而對應的私鑰需要由用戶自行保管。認證過程基於生成出來的私鑰，但整個認證過程中私鑰本身不會傳輸到網路中。 \n SSH協定有兩個主要版本，分別是SSH-1和SSH-2。無論是哪個版本，核實未知金鑰來源都是重要的事情，因為SSH只驗證提供用戶是否擁有與公鑰相匹配的私鑰，只要接受公鑰而且金鑰匹配伺服器就會授予許可。這樣的話，一旦接受了惡意攻擊者的公鑰，那麼系統也會把攻擊者視為合法用戶。 \n', 'tags': '', 'url': 'SSH.html'}, {'title': 'OSI模型', 'text': '開放式系統互聯模型 （英語： O pen \xa0 S ystem \xa0 I nterconnection Model ，縮寫：OSI；簡稱為 OSI模型 ）是一種 概念模型 ，由 國際標準化組織 提出，一個試圖使各種電腦在世界範圍內互連為網路的標準框架。 \n OSI是一個定義良好的協定規範集，並有許多可選部分完成類似的任務。它定義了開放系統的階層、層次之間的相互關係以及各層所包括的可能的任務，作為一個框架來協調和組織各層所提供的服務。 \n OSI參考模型並沒有提供一個可以實現的方法，而是描述了一些概念，用來協調行程間通訊標準的制定。即OSI參考模型並不是一個標準，而是一個在制定標準時所使用的概念性框架。 \n', 'tags': '', 'url': 'OSI模型.html'}, {'title': '第1層 實體層', 'text': '實體層（Physical Layer）在局部區域網路上傳送 資料框 （Data Frame），它負責管理電腦通訊裝置和網路媒體之間的互通。包括了針腳、電壓、線纜規範、集線器、中繼器、網卡、主機介面卡等。 \n', 'tags': '', 'url': '第1層 實體層.html'}, {'title': '第2層 資料連結層', 'text': '資料連結層（Data Link Layer）負責網路尋址、錯誤偵測和改錯。當表頭和表尾被加至資料包時，會形成 資訊框 （Data Frame）。資料連結串列頭（DLH）是包含了實體位址和錯誤偵測及改錯的方法。資料連結串列尾（DLT）是一串指示資料包末端的字串。例如乙太網、無線區域網路（Wi-Fi）和通用分組無線服務（GPRS）等。 \n 分為兩個子層：邏輯鏈路控制（logical link control，LLC）子層和媒介存取控制（Media access control，MAC）子層。 \n', 'tags': '', 'url': '第2層 資料連結層.html'}, {'title': '第3層 網路層', 'text': '網路層（Network Layer）決定資料的路徑選擇和轉寄，將網路表頭（NH）加至資料包，以形成封包。網路表頭包含了網路資料。例如:網際網路協定（IP）等。 \n', 'tags': '', 'url': '第3層 網路層.html'}, {'title': '第4層 傳輸層', 'text': '傳輸層（Transport Layer）把傳輸表頭（TH）加至資料以形成資料包。傳輸表頭包含了所使用的協定等傳送資訊。例如:傳輸控制協定（TCP）等。 \n', 'tags': '', 'url': '第4層 傳輸層.html'}, {'title': '第5層 會議層', 'text': '會議層（Session Layer）負責在資料傳輸中設定和維護電腦網路中兩台電腦之間的通訊連接。 \n', 'tags': '', 'url': '第5層 會議層.html'}, {'title': '第6層 表達層', 'text': '表達層（Presentation Layer）把資料轉換為能與接收者的系統格式相容並適合傳輸的格式。 \n', 'tags': '', 'url': '第6層 表達層.html'}, {'title': '第7層 應用層', 'text': '應用層（Application Layer）提供為應用軟體而設的介面，以設定與另一應用軟體之間的通訊。例如: HTTP、HTTPS、FTP、TELNET、SSH、SMTP、POP3、HTML等。 \n', 'tags': '', 'url': '第7層 應用層.html'}, {'title': 'IPv6', 'text': '網際協定第6版 （英語： I nternet \xa0 P rotocol \xa0 v ersion \xa0 6 ，縮寫： IPv6 ）是 網際協定 的最新版本，用作 網際網路 的 網路層 協定。用它來取代 IPv4 主要是為了解決 IPv4位址枯竭問題 ，同時它也在其他方面對於IPv4有許多改進。 \n IPv6的設計目的是取代IPv4，然而長期以來IPv4在網際網路流量中仍占據主要地位，IPv6的使用增長緩慢。在2019年12月，通過IPv6使用 Google 服務的用戶百分率首次超過30%。 \n', 'tags': '', 'url': 'IPv6.html'}, {'title': 'IPv4', 'text': '網際協定版本4 （英語： I nternet \xa0 P rotocol \xa0 v ersion \xa0 4 ，縮寫： IPv4 ，又稱 網際網路通訊協定第四版 ）是 網際協定 開發過程中的第四個修訂版本，也是此協定第一個被廣泛部署和使用的版本。其後繼版本為 IPv6 ，直到2011年， IANA \xa0 IPv4位元址完全用盡時，IPv6仍處在部署的初期。 \n IPv4在 IETF 於1981年9月發布的 \xa0 RFC 791 \xa0 中被描述，此RFC替換了於1980年1月發布的 \xa0 RFC 760 。 \n IPv4是一種 無連接 的協定，操作在使用 封包交換 的連結層（如 乙太網路 ）上。此協定會盡最大努力交付封包，意即它不保證任何封包均能送達目的地，也不保證所有封包均按照正確的順序無重複地到達。這些方面是由上層的傳輸協定（如 傳輸控制協定 ）處理的。 \n', 'tags': '', 'url': 'IPv4.html'}, {'title': 'Proxy', 'text': '代理 （英語： Proxy ）也稱 網路代理 ，是一種特殊的網路服務，允許一個 網路終端 （一般為 客戶端 ）通過這個服務與另一個 網路終端 （一般為 伺服器 ）進行非直接的連接。一些 閘道器 、 路由器 等網路裝置具備網路代理功能。一般認為代理服務有利於保障網路終端的隱私或安全，防止攻擊。 \n 提供代理服務的電腦系統或其它類型的網路終端稱為代理伺服器（英文：Proxy Server）。一個完整的代理請求過程為： 客戶端 首先與代理伺服器建立連接，接著根據代理伺服器所使用的代理協定，請求對目標伺服器建立連接、或者獲得目標伺服器的指定資源（如：檔案）。在後一種情況中，代理伺服器可能對目標伺服器的資源下載至本地 快取 ，如果客戶端所要取得的資源在代理伺服器的快取之中，則代理伺服器並不會向目標伺服器傳送請求，而是直接傳回已快取的資源。一些代理協定允許代理伺服器改變客戶端的原始請求、目標伺服器的原始回應，以滿足代理協定的需要。代理伺服器的選項和設定在電腦程式中，通常包括一個「防火牆」，允許用戶輸入代理位址，它會遮蓋他們的網路活動，可以允許繞過網際網路過濾實現網路存取。 \n 代理伺服器的基本行為就是接收客戶端傳送的請求後轉發給其他伺服器。代理不改變請求 URI ，會直接傳送給前方持有資源的目標伺服器。 \n 持有資源實體的伺服器被稱為 源伺服器 。從源伺服器返回的回應經過代理伺服器後再傳給客戶端。 \n', 'tags': '', 'url': 'Proxy.html'}, {'title': 'NAT', 'text': '網路位址轉換 （英語： N etwork \xa0 A ddress \xa0 T ranslation ，縮寫： NAT ；又稱 網路掩蔽 、 IP 掩蔽 ）在 計算機網路 中是一種在 IP 封包 通過 路由器 或 防火牆 時重寫來源 IP地址 或目的 IP 位址的技術。這種技術被普遍使用在有多台主機但只通過一個公有IP位址存取 網際網路 的 私有網路 中。它是一個方便且得到了廣泛應用的技術。當然， NAT 也讓主機之間的通信變得複雜，導致了通信效率的降低。 \n', 'tags': '', 'url': 'NAT.html'}, {'title': 'DHCP', 'text': '由於 IP 位址不夠，為了節省子網路中 IP 位址的使用量，可以設定網路中的一台主機做為指揮中心，稱為「動態主機組態協定伺服器（DHCP server）」或「DHCP 伺服器」。負責動態分配 IP 位址，當網路中有任何一台電腦要連線時，才向 DHCP 伺服器要求一個 IP 位址， DHCP 伺服器會從資料庫中找出一個目前尚未被使用的 IP 位址提供給該電腦使用，使用完畢後電腦再將這個 IP 位址還給 DHCP 伺服器，提供給其他上線的電腦使用。 \n 「動態主機組態協定（Dynamic Host Configuration Protocol, DHCP）」主要的功能是提供用戶端電腦動態的 IP 位址、子網路遮罩（Subnet mask）、預設閘道器（Default gateway）、DNS 伺服器的 IP 位址等，可以減少用戶端手動設定 IP 位址的麻煩，並且減少手動設定發生錯誤的機率，又可以節省 IP 位址的使用量。 \n', 'tags': '', 'url': 'DHCP.html'}, {'title': '電腦常用快捷鍵', 'text': 'Windowss 標誌鍵 + Shift + S\xa0 == 選取某部分截圖 \n Ctrl + X ==\xa0剪下選取的項目 \n Ctrl + C (或 Ctrl + Insert) ==\xa0複製選取的項目 \n Ctrl+N ==\xa0 開啟新網頁。 \n Ctrl+W ==\xa0 關閉目前視窗。 \n Ctrl + V (或 Shift + Insert) ==\xa0貼上選取的項目 \n Ctrl + Z ==\xa0復原動作 \n Alt + Tab ==\xa0在開啟的應用程式之間切換 \n Alt + F4 ==\xa0關閉使用中的項目，或結束使用中的應用程式 \n Windows 標誌鍵\xa0 \xa0 + L ==\xa0鎖定您的電腦 \n Windows 標誌鍵\xa0 \xa0 + D ==\xa0顯示或隱藏桌面 \n F2 ==\xa0重新命名選取的項目 \n F3 ==\xa0重新命名選取的項目 \n F4 ==\xa0在 [檔案總管] 中顯示網址列清單 \n F5 ==\xa0重新整理使用中視窗 \n F6 ==\xa0重新整理使用中視窗 \n F10 ==\xa0啟動使用中應用程式的功能表列 \n Ctrl + Shift + Esc ==\xa0開啟 [工作管理員]。 \n Windows 標誌鍵\xa0 \xa0 + V ==\xa0開啟剪貼簿。 \n Windows 標誌鍵\xa0 \xa0 + U ==\xa0開啟 [輕鬆存取中心]。 \n Windows 標誌鍵\xa0 \xa0 + X ==\xa0開啟 [快速連結] 功能表。 \n Windows 標誌鍵\xa0 \xa0 + G ==\xa0開啟 [意見反應中樞] 並抓取螢幕擷取畫面。 \n Windows 標誌鍵\xa0 \xa0 + D ==\xa0顯示或隱藏桌面。 \n', 'tags': '', 'url': '電腦常用快捷鍵.html'}, {'title': '電腦構造', 'text': '\n 輸入單元 ：負責將資料、程式及命令的輸入。如鍵盤、滑鼠、光筆及磁碟機等 \n 輸出單元 ：負責輸出電腦所執行的結果，或顯示電腦系統的訊息，如印表機、喇叭及螢幕等。 \n 算術邏輯單元 ：負責電腦內部之算術（加、減、乘、除）及邏輯（AND、OR、NOT）運算。 \n 控制單元 ：負責分析、指揮及控制各單元的運作，它會適時遞送出控制訊號使電腦系統能正確的執行。 \n 記憶單元 ：負責儲存程式或資料，又可分為主記憶體與輔助記憶體。主記憶體分為唯讀記憶體（ROM）只能讀不能寫、隨機存取記憶體（RAM）能讀能寫；輔助記憶體如磁碟、光碟等。 \n \n \n', 'tags': '', 'url': '電腦構造.html'}, {'title': '硬體(Hardware)', 'text': '', 'tags': '', 'url': '硬體(Hardware).html'}, {'title': '機箱', 'text': '電腦的許多硬體，如主機板、硬碟和電源等，都安放與固定在機箱當中。機箱是一個相對封閉的空間，箱體一般由 鋼 和 鋁 等金屬製成 [6] （其他材料亦可用，但不多見），同時設有許多通風口，以促進箱內空氣流動，防止內部溫度過高。機箱的顏色、大小乃至形狀等可根據內部硬體之實際需要以及個人的喜好而變。 \n 目前市場比較普遍的機箱規格有 ATX規格 和 Micro ATX 等2種，另外以 ITX 標準小型機箱也在流行趨勢中。', 'tags': '', 'url': '機箱.html'}, {'title': '主機板', 'text': '主機板是計算機的主要 電路板 （PCB）。計算機的其他硬體一般直接插入到主機板中來交換資訊。主機板通常由 晶片組 、 BIOS 、 印表埠 、各種周邊裝置連接埠（如 網路埠 、 Audio 、 USB ）、 PS/2 鍵盤/鼠標介面和PCIe/PCI擴展插槽等組成。有時為了減小主機板尺寸，節省成本也通過插到主機板的子板來擴充更多擴展槽。現時主流的主機板規格有 ATX規格 、 MicroATX 、 Mini-ITX 。 \n \n', 'tags': '', 'url': '主機板.html'}, {'title': '中央處理器', 'text': '', 'tags': '', 'url': '中央處理器.html'}, {'title': '主記憶體', 'text': '', 'tags': '', 'url': '主記憶體.html'}, {'title': '電源供應器', 'text': '', 'tags': '', 'url': '電源供應器.html'}, {'title': '顯示器', 'text': '', 'tags': '', 'url': '顯示器.html'}, {'title': '外部儲存媒體', 'text': '', 'tags': '', 'url': '外部儲存媒體.html'}, {'title': '軟體(software)', 'text': '', 'tags': '', 'url': '軟體(software).html'}, {'title': '韌體(firmware)', 'text': '', 'tags': '', 'url': '韌體(firmware).html'}, {'title': '課程進度', 'text': '', 'tags': '', 'url': '課程進度.html'}, {'title': 'W6', 'text': '1.將遠端的 wcmj2020 以 git clone 取下. \n \xa0 \xa0 \xa0git clone\xa0 https://github.com/50833101/wcmj2020.git \n \xa0 \xa0 \xa0git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0 cmsimde \n 2.進入 cmsimde 以 python wsgi.py 啟動動態系統 \n \xa0 \xa0 \xa0以瀏覽器\xa0 https://localhost:9443 \xa0 可以利用 admin 為帳號登入管理 \n 3.動態系統維護後, 利用 generate_pages 轉為靜態. \n \n 4.\xa0git add .\xa0 \xa0 \xa0git commit -m "commit message"\xa0 \xa0 \xa0git push \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '1.介紹 portable OBS . google meet . shareX \n 2.利用google meet做線上教學 \n 3.學習用portable OBS 做串流直播 \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '1.第一次線上直播教學測試 \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '1.第一次線上直播教學(google meet) \n 2.完成期中作業 \n 3.完成填寫自評分數 \n \n \n', 'tags': '', 'url': 'W9.html'}, {'title': 'W10', 'text': '1. 利用 putty 建立 public key / private key \n 2. 利用cmd 將 public key 轉成 github接受的格式 \n 3. 將轉換後的 public key 放到 github-setting 中的SSH keys \n 4.\xa0 利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定. \n 5. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection->SSH->Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位.\xa0並在 Connection->Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128. \n 6. 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線 \n 之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push. \n p.s.\xa0 若找不到.git 試著將隱藏目錄的設定移除, 看能否進入 .git 目錄, 然後看到 config 檔案. \n \xa0 ', 'tags': '', 'url': 'W10.html'}]};